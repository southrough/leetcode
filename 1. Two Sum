class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i,x in enumerate(nums):
            temp = target - x
            if temp in nums and nums.index(temp) != i:
                return [i,nums.index(temp)]

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        map_iv = {}
        for i, x in enumerate(nums):
            temp = target - x
            if x in map_iv.keys():
                return [map_iv[x], i]
            map_iv[temp] = i

那差值去遍历容易想到，困难在于如何保证差值不重复

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        alist=[]
        for i,x in enumerate(nums):
            temp = target - x
            if x in alist:
                return [alist.index(x),i]
            alist.append(temp)

dict效率还是远高于list

C++ unordered_map 用法
class Solution {
public:
     vector<int> twoSum(vector<int>& nums, int target) {
         vector<int> res(2);
         unordered_map<int,int> h_map;
         for(int i=0;i<nums.size();++i){
             int temp=target-nums[i];
             unordered_map<int,int>::iterator found;
             found = h_map.find(nums[i]);
             if(found!=h_map.end()){
                 res[0]=found->second;
                 res[1]=i;
                 return res;
             }
             h_map[temp]=i;
         }
        return res;
     }
};
